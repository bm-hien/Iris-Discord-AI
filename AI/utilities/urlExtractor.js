/**
 * Utility ƒë·ªÉ tr√≠ch xu·∫•t URLs t·ª´ text
 */

/**
 * Extract t·∫•t c·∫£ URLs t·ª´ text message
 * @param {string} text - Text ƒë·ªÉ extract URLs
 * @returns {Array<string>} - M·∫£ng c√°c URLs ƒë∆∞·ª£c t√¨m th·∫•y
 */
function extractUrls(text) {
  if (!text || typeof text !== 'string') {
    return [];
  }

  // Regex pattern ƒë·ªÉ match URLs
  const urlPattern = /https?:\/\/(?:[-\w.])+(?:[:\d]+)?(?:\/(?:[\w/_.])*)?(?:\?(?:[\w&=%.])*)?(?:#(?:[\w.])*)?/gi;
  
  const matches = text.match(urlPattern);
  
  if (!matches) {
    return [];
  }

  // Clean v√† validate URLs
  const validUrls = matches
    .map(url => url.trim())
    .filter(url => {
      try {
        new URL(url);
        return true;
      } catch (e) {
        return false;
      }
    })
    // Remove duplicates
    .filter((url, index, array) => array.indexOf(url) === index)
    // Limit to 5 URLs max ƒë·ªÉ tr√°nh spam
    .slice(0, 5);

  return validUrls;
}

/**
 * Ki·ªÉm tra xem text c√≥ ch·ª©a URLs kh√¥ng
 * @param {string} text - Text ƒë·ªÉ ki·ªÉm tra
 * @returns {boolean} - True n·∫øu c√≥ URLs
 */
function hasUrls(text) {
  return extractUrls(text).length > 0;
}

/**
 * Thay th·∫ø URLs trong text b·∫±ng placeholder
 * @param {string} text - Text g·ªëc
 * @param {string} placeholder - Placeholder ƒë·ªÉ thay th·∫ø (default: "[URL]")
 * @returns {string} - Text v·ªõi URLs ƒë∆∞·ª£c thay th·∫ø
 */
function replaceUrlsWithPlaceholder(text, placeholder = '[URL]') {
  if (!text || typeof text !== 'string') {
    return text;
  }

  const urlPattern = /https?:\/\/(?:[-\w.])+(?:[:\d]+)?(?:\/(?:[\w/_.])*)?(?:\?(?:[\w&=%.])*)?(?:#(?:[\w.])*)?/gi;
  
  return text.replace(urlPattern, placeholder);
}

/**
 * Validate URL format
 * @param {string} url - URL ƒë·ªÉ validate
 * @returns {boolean} - True n·∫øu URL h·ª£p l·ªá
 */
function isValidUrl(url) {
  try {
    new URL(url);
    return url.startsWith('http://') || url.startsWith('https://');
  } catch (e) {
    return false;
  }
}



/**
 * R√∫t g·ªçn URL ƒë·ªÉ hi·ªÉn th·ªã (max length)
 * @param {string} url - URL g·ªëc
 * @param {number} maxLength - ƒê·ªô d√†i t·ªëi ƒëa (default: 50)
 * @returns {string} - URL ƒë√£ r√∫t g·ªçn
 */
function shortenUrl(url, maxLength = 50) {
  if (!url || url.length <= maxLength) {
    return url;
  }

  try {
    const urlObj = new URL(url);
    const domain = urlObj.hostname;
    const path = urlObj.pathname + urlObj.search;
    
    if (domain.length + 10 >= maxLength) {
      return domain.substring(0, maxLength - 3) + '...';
    }
    
    const remainingLength = maxLength - domain.length - 3; // 3 for "..."
    if (path.length > remainingLength) {
      return domain + path.substring(0, remainingLength) + '...';
    }
    
    return domain + path;
  } catch (e) {
    return url.substring(0, maxLength - 3) + '...';
  }
}

function modelSupportsUrlContext(modelId) {
  const urlContextSupportedModels = [
    'gemini-2.5-pro-preview-05-06',
    'gemini-2.5-flash-preview-05-20',
    'gemini-2.0-flash',
    'gemini-2.0-flash-live-001'
  ];
  
  return urlContextSupportedModels.includes(modelId);
}

function createUrlContextWarning(urls, currentModel) {
  return `‚ö†Ô∏è **URL Context kh√¥ng kh·∫£ d·ª•ng**\n\n` +
         `Ph√°t hi·ªán ${urls.length} URL nh∆∞ng model hi·ªán t·∫°i (\`${currentModel}\`) kh√¥ng h·ªó tr·ª£ URL context.\n\n` +
         `üåê **Models h·ªó tr·ª£ URL context:**\n` +
         `‚Ä¢ \`gemini-2.5-flash-preview-05-20\` (khuy·∫øn ngh·ªã)\n` +
         `‚Ä¢ \`gemini-2.5-pro-preview-05-06\`\n` +
         `‚Ä¢ \`gemini-2.0-flash\`\n` +
         `‚Ä¢ \`gemini-2.0-flash-live-001\`\n\n` +
         `üí° S·ª≠ d·ª•ng \`/model set\` ƒë·ªÉ chuy·ªÉn sang model h·ªó tr·ª£ URL context.`;
}

module.exports = {
  extractUrls,
  hasUrls,
  replaceUrlsWithPlaceholder,
  isValidUrl,
  shortenUrl,
  modelSupportsUrlContext,
  createUrlContextWarning
};